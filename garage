#!/usr/bin/env python3


import aiofiles
from aiohttp import ClientSession
import argparse
import asyncio
from datetime import datetime
import json
from dotenv import load_dotenv
import os
from pathlib import Path
import pymyq
from time import sleep
import sys


load_dotenv()


def log(message):
    print(message, file = sys.stdout)


async def login(websession):
    username = os.environ.get('USERNAME', None)
    password = os.environ.get('PASSWORD', None)
    myq = await pymyq.login(username, password, websession)

    return myq


async def open(device):
    log('Attempting to open garage')
    if device.state != 'closed':
        log('Garage already opened')
        return

    await device.open(wait_for_state = False)


async def close(device):
    log('Attempting to close garage')
    if device.state != 'open':
        log('Garage already closed')
        return

    await device.close(wait_for_state = False)


def status(device):
    log(device.state)


async def manage(websession):
    while True:
        log('Starting garage automation process...')
        sleep(60)

        myq = await login(websession)
        covers = myq.covers

        if len(covers.keys()) == 1:
            device = next(iter(covers.values()))

        current_day = datetime.today().strftime('%A')
        current_time = datetime.now().strftime('%H:%M')
        working_dir = os.path.dirname(os.path.realpath(__file__))
        schedule_path = '/'.join([working_dir, 'schedule.json'])

        async with aiofiles.open(schedule_path) as f:
            schedule = json.loads(await f.read())

        if not schedule['enabled']:
            continue

        days = schedule['days']
        open_times = schedule['open']
        close_times = schedule['close']

        if not current_day in days:
            continue

        if current_time in open_times:
            await open(device)
            continue

        if current_time in close_times:
            await close(device)
            continue


async def main(action):
    async with ClientSession() as websession:
        myq = await login(websession)
        covers = myq.covers

        if len(covers.keys()) == 1:
            device = next(iter(covers.values()))

        match action:
            case 'open':
                await open(device)
            case 'close':
                await close(device)
            case 'status':
                status(device)
            case 'manage':
                await manage(websession)
            case _:
                log(f'Unknown action ({action})')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Garage Door Management')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-o', '--open', action = 'store_true', help = 'Sends the open command to garage')
    group.add_argument('-c', '--close', action = 'store_true', help = 'Sends the close command to garage')
    group.add_argument('-s', '--status', action = 'store_true', help = 'Returns the current status of the garage')
    group.add_argument('-m', '--manage', action = 'store_true', help = 'Starts a continuous loop to manage the garage')
    args = parser.parse_args()

    if args.open:
        action = 'open'
    if args.close:
        action = 'close'
    if args.status:
        action = 'status'
    if args.manage:
        action = 'manage'

    asyncio.get_event_loop().run_until_complete(main(action))
